// Code generated by flotilla/asset/pack.
// sources:
// assets/templates/layout_asset.html
// assets/templates/test_asset.html
// DO NOT EDIT!

package resources

import (
	"bytes"
	"compress/gzip"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsTemplatesLayout_assetHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8d\xc1\x0e\x82\x30\x0c\x86\xef\x3c\x45\xd9\x7d\xec\x05\xca\x12\xa3\x9e\xf5\xe0\xc5\x13\x19\x50\xb3\xc5\x01\x86\xf6\x42\xc8\xde\xdd\xe1\x62\x2f\x4d\xdb\xaf\xff\x87\xf5\xe5\x76\x7e\x3c\xef\x57\xf0\x32\x45\x5b\xe1\xbf\x91\x1b\x6d\x05\xb9\x50\x82\x44\xb2\xfb\x0e\xcd\x69\xde\x20\x25\x34\x65\x73\x1c\x0b\x51\x6b\x8d\x31\xcc\x6f\x58\x29\xb6\x8a\x65\x8b\xc4\x9e\x48\x14\xf8\x95\x5e\xad\x32\x2c\x4e\xc2\x60\x06\x66\xd3\x3b\x0e\x43\x27\x9e\x26\x6a\xf2\xac\x2c\x9a\xe3\xd5\x6a\x9d\xad\xa6\x68\xb1\x5f\xc6\xcd\x96\xf0\xec\x15\x9a\x3e\xd1\x09\x81\x72\xcc\x24\xdd\xba\x2c\x39\x3a\xa5\xcc\xff\xc0\xea\x1b\x00\x00\xff\xff\x9a\x59\xde\xb0\xc5\x00\x00\x00")

func assetsTemplatesLayout_assetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesLayout_assetHtml,
		"assets/templates/layout_asset.html",
	)
}

func assetsTemplatesLayout_assetHtml() (*asset, error) {
	bytes, err := assetsTemplatesLayout_assetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/layout_asset.html", size: 197, mode: os.FileMode(436), modTime: time.Unix(1452348380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTemplatesTest_assetHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8e\xc1\x0a\x02\x21\x10\x86\xef\xfb\x14\x83\x0f\x50\x2f\xb0\x04\x7b\xf0\x56\x10\xe8\x5d\x04\x27\x12\x5c\x5d\xd6\x29\x8a\x65\xdf\xbd\x19\xf1\x12\x94\x47\xbf\x8f\xef\x9f\x6d\x03\x7c\x11\xe6\x50\x41\x25\xff\x2e\x0f\x72\xbe\x56\xa4\xc3\x9d\xe6\xa4\x60\xdf\x87\x81\x95\x80\xb7\x98\x11\x54\x43\x6e\xf1\x2b\x45\x9f\x5c\xc9\xd8\x0c\xe0\x37\x86\xf8\x3c\x35\x0c\x1d\x03\xe3\xf1\x28\xdf\x52\xe0\x85\x9f\xad\xb5\x14\xfa\x8e\x58\x6d\x2c\x4c\xc6\x68\x0b\x56\x5f\xae\xe7\xc9\xea\x9e\x11\x85\x03\x84\xf3\x92\x3c\xfd\x3b\x47\xac\xbe\x28\xdd\x4f\x00\x00\x00\xff\xff\xd8\x4d\x45\xe3\xe1\x00\x00\x00")

func assetsTemplatesTest_assetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTemplatesTest_assetHtml,
		"assets/templates/test_asset.html",
	)
}

func assetsTemplatesTest_assetHtml() (*asset, error) {
	bytes, err := assetsTemplatesTest_assetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/templates/test_asset.html", size: 225, mode: os.FileMode(436), modTime: time.Unix(1452348380, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var ResourceFS *bindataFS = &bindataFS{
	prefix: "",
	tree:   _bintree,
	data:   _bindata,
}

type bindataFS struct {
	prefix string
	tree   *bintree
	data   bindata
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func (b *bindataFS) Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := b.data[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func (b *bindataFS) MustAsset(name string) []byte {
	a, err := b.Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func (b *bindataFS) AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := b.data[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func (b *bindataFS) AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

type bindata map[string]func() (*asset, error)

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = bindata{
	"assets/templates/layout_asset.html": assetsTemplatesLayout_assetHtml,
	"assets/templates/test_asset.html":   assetsTemplatesTest_assetHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func (b *bindataFS) AssetDir(name string) ([]string, error) {
	node := b.tree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"templates": &bintree{nil, map[string]*bintree{
			"layout_asset.html": &bintree{assetsTemplatesLayout_assetHtml, map[string]*bintree{}},
			"test_asset.html":   &bintree{assetsTemplatesTest_assetHtml, map[string]*bintree{}},
		}},
	}},
}}

func (b *bindataFS) HasAsset(requested string) (string, bool) {
	for _, filename := range b.AssetNames() {
		if path.Base(filename) == requested {
			return filename, true
		}
	}
	return "", false
}

func (b *bindataFS) AssetHttp(requested string) (http.File, error) {
	if has, ok := b.HasAsset(requested); ok {
		f, err := b.open(has)
		return f, err
	}
	return nil, errors.New(fmt.Sprintf("Asset %!s(MISSING) unavailable", requested))
}

func (b *bindataFS) open(name string) (http.File, error) {
	name = path.Join(b.prefix, name)
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	if children, err := b.AssetDir(name); err == nil {
		return NewAssetDirectory(name, children, b), nil
	}
	bf, err := b.Asset(name)
	if err != nil {
		return nil, err
	}
	return NewAssetFile(name, bf), nil
}

type AssetDirectory struct {
	AssetFile
	ChildrenRead int
	Children     []os.FileInfo
}

func NewAssetDirectory(name string, children []string, fs *bindataFS) *AssetDirectory {
	fileinfos := make([]os.FileInfo, 0, len(children))
	for _, child := range children {
		_, err := fs.AssetDir(filepath.Join(name, child))
		fileinfos = append(fileinfos, &FakeFile{child, err == nil, 0})
	}
	return &AssetDirectory{
		AssetFile{
			bytes.NewReader(nil),
			ioutil.NopCloser(nil),
			FakeFile{name, true, 0},
		},
		0,
		fileinfos}
}

func (f *AssetDirectory) Readdir(count int) ([]os.FileInfo, error) {
	if count <= 0 {
		return f.Children, nil
	}
	if f.ChildrenRead+count > len(f.Children) {
		count = len(f.Children) - f.ChildrenRead
	}
	rv := f.Children[f.ChildrenRead : f.ChildrenRead+count]
	f.ChildrenRead += count
	return rv, nil
}

func (f *AssetDirectory) Stat() (os.FileInfo, error) {
	return f, nil
}

type AssetFile struct {
	*bytes.Reader
	io.Closer
	FakeFile
}

func NewAssetFile(name string, content []byte) *AssetFile {
	return &AssetFile{
		bytes.NewReader(content),
		ioutil.NopCloser(nil),
		FakeFile{name, false, int64(len(content))},
	}
}

func (f *AssetFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, errors.New("not a directory")
}

func (f *AssetFile) Size() int64 {
	return f.FakeFile.Size()
}

func (f *AssetFile) Stat() (os.FileInfo, error) {
	return f, nil
}

type FakeFile struct {
	Path string
	Dir  bool
	Len  int64
}

func (f *FakeFile) Name() string {
	_, name := filepath.Split(f.Path)
	return name
}

func (f *FakeFile) Mode() os.FileMode {
	mode := os.FileMode(0644)
	if f.Dir {
		return mode | os.ModeDir
	}
	return mode
}

func (f *FakeFile) ModTime() time.Time {
	return time.Unix(0, 0)
}

func (f *FakeFile) Size() int64 {
	return f.Len
}

func (f *FakeFile) IsDir() bool {
	return f.Mode().IsDir()
}

func (f *FakeFile) Sys() interface{} {
	return nil
}

// RestoreAsset restores an asset under the given directory
func (b *bindataFS) RestoreAsset(dir, name string) error {
	data, err := b.Asset(name)
	if err != nil {
		return err
	}
	info, err := b.AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// RestoreAssets restores an asset under the given directory recursively
func (b *bindataFS) RestoreAssets(dir, name string) error {
	children, err := b.AssetDir(name)
	// File
	if err != nil {
		return b.RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = b.RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}
